Reading this document should make you familiar with how commit messages are written for this project. It provides examples that will help you be consistent with previous commits. You can also read through the project's commit history for more examples.
If you come across commit types or scopes that frequently appear in the commit history but are not documented here, a helpful contribution is to update this document with the missing types and/or scopes.

# Commit syntax

Each commit should follow the Conventional Commits format:

    <type>(<optional scope>): <description>

    [optional body]

    [optional footer]

# Commit Types used

As a convenience, some of the types used in the project so far are listed below.

- chore: small maintenance tasks that don't affect application behaviour.
- ci: changes related to CI configuration files and scripts
- docs: documentation
- exp: an experiment committed only for learning/checking purposes.
- feat: introduces a new feature or significantly enhances an existing feature.
- style: no change to information content or code logic.

# Commit Scopes used

As a convenience, some of the scopes used in the project so far are listed
below.

`vc`: doing something with version control
`setup`: doing something to setup the repo
`data`: doing something with raw data
`constants`: doing something with constants

# Examples of commits

type(scope): description
chore(vc): add empty file to document commit conventions
ci(vc): update with mypy pre-commit hook
docs(vc): update commit conventions.
exp(vc): test mypy hook with `int + str` expression
feat(data): add initial dataset files
feat(constants): add paths for dataset files
